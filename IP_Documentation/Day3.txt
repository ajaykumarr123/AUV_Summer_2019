Documentation---------------------DAY 3------------------P AMSHUMAAN VARMA----------IP PHASE 1---

1)Made a function for Gaussian Blur

eg)-------------------------------CODE------------------------------------------------------

#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <iostream>

using namespace cv;
using namespace std;

Mat img0 = imread("IMAGE PATH",0);

Mat img(img0.rows,img0.cols,CV_8UC1, Scalar(0));

void Gus_Blur() {
    int i,j;
    int value;
    for (i=1;i<img0.rows-1;i++) {
        for(j=1;j<img0.cols-1;j++) {
          value=0;
          value=value+(img0.at<uchar>(i-1,j-1)+img0.at<uchar>(i-1,j+1)+img0.at<uchar>(i+1,j-1)+img0.at<uchar>(i+1,j+1))/16;
          value=value+(img0.at<uchar>(i-1,j)+img0.at<uchar>(i,j-1)+img0.at<uchar>(i,j+1)+img0.at<uchar>(i+1,j))/8;
          value=value+(img0.at<uchar>(i,j))/4;
          img.at<uchar>(i,j)=value;
        }
    }
}

int main(int argc, char** argv)
{
 // Check for failure
 if (img0.empty()) 
 {
  cout << "Could not open or find the image" << endl;
  cin.get(); //wait for any key press
  return -1;
 }
 
 Gus_Blur();

String windowName = "Mirror Image"; //Name of the window

 namedWindow(windowName,WINDOW_NORMAL); // Create a window

 imshow(windowName, img0); // Show our image inside the created window.

 waitKey(0); // Wait for any keystroke in the window

 destroyWindow(windowName); //destroy the created window

 return 0;
}

----------------------------------------------------------------------------------------------

2) DownScalling and Upscalling of Images
   Difference between downscale after upscale and upscale after downscale

 ----------------------------------Downscale--------------------------------------------------
 #include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main(int argc, char** argv)
{
 Mat image = imread("IMAGE PATH",1);

 // Check for failure
 if (image.empty()) 
 {
  cout << "Could not open or find the image" << endl;
  cin.get(); //wait for any key press
  return -1;
 }

Mat image1(image.rows/3,image.cols/3,CV_8UC3, Scalar(0,0,0));

float h_ind=(float)image.cols/image1.cols;
float v_ind=(float)image.rows/image1.rows;

int mean,sumr,sumg,sumb,count;

int i,j,x,y;

for (i=0;i<image1.rows;i++) {
  		for (j=0;j<image1.cols;j++) {
  				sumr=0;
  				sumg=0;
  				sumb=0;
  				count=0;
  				for (x=(int)i*v_ind;x<(int)(i+1)*v_ind;x++) {
  					for (y=(int)j*h_ind;y<(int)(j+1)*h_ind;y++) {
  						if (x>=0 && y>=0 && x<image.rows && y<image.cols) {
  							sumr=sumr+image.at<Vec3b>(x,y)[2];
  							sumg=sumg+image.at<Vec3b>(x,y)[1];
  							sumb=sumb+image.at<Vec3b>(x,y)[0];
  							count++;
  						}
  					}
  				}
  				image1.at<Vec3b>(i,j)[2]=sumr/count;
  				image1.at<Vec3b>(i,j)[1]=sumg/count;
  				image1.at<Vec3b>(i,j)[0]=sumb/count;
  		}
  }

 namedWindow("Original",WINDOW_NORMAL); // Create a window

 namedWindow("Resize",WINDOW_NORMAL); // Create a window

 imshow("Original", image); // Show our image inside the created window.
 imshow("Resize", image1); // Show our image inside the created window.

 waitKey(0); // Wait for any keystroke in the window

 destroyWindow("Original");
  destroyWindow("Resize"); //destroy the created window

 return 0;
}

----------------------------------------UPSCALE-------------------------------------------
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main(int argc, char** argv)
{
 Mat image = imread("IMAGE PATH",1);

 // Check for failure
 if (image.empty()) 
 {
  cout << "Could not open or find the image" << endl;
  cin.get(); //wait for any key press
  return -1;
 }

Mat image1(3*image.rows,3*image.cols,CV_8UC3, Scalar(0,0,0));

float h_ind=(float)image.cols/image1.cols;
float v_ind=(float)image.rows/image1.rows;

int i,j;

for (i=0;i<image1.rows;i++) {
  		for (j=0;j<image1.cols;j++) {
  				image1.at<Vec3b>(i,j)=image.at<Vec3b>((int)i*v_ind,(int)j*h_ind);
  		}
}

namedWindow("Original",WINDOW_NORMAL); // Create a window

 namedWindow("Resize",WINDOW_NORMAL); // Create a window

 imshow("Original", image); // Show our image inside the created window.
 imshow("Resize", image1); // Show our image inside the created window.

 waitKey(0); // Wait for any keystroke in the window

 destroyWindow("Original");
  destroyWindow("Resize"); //destroy the created window

 return 0;
}

------------------------------------------------------------------------------------

3) Edge Detection :
	Blur the image using Gaussian Kernel 
    Detecting the edges using Prewitt and Sobel Kernel
    Setting a treshold for the edge detection
	Dilation of Edges
	Erosion of Edges
	Difference between Morphological Opening and Closing

The following code outpur 2 images, one Morphological Opening and other Morphological Closing

-------------------------------Edge Detection,Dilation and Erosion----------------------

#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <iostream>

using namespace cv;
using namespace std;

Mat img0=imread("/home/amshumaan/OpenCV/images/parrot.jpg",0);

Mat	imgf(img0.rows,img0.cols,CV_8UC1, Scalar(0));
Mat	img(img0.rows,img0.cols,CV_8UC1, Scalar(0));
Mat	img1(img0.rows,img0.cols,CV_8UC1, Scalar(0));
Mat	img2(img0.rows,img0.cols,CV_8UC1, Scalar(0));
Mat	img3(img0.rows,img0.cols,CV_8UC1, Scalar(0));
Mat	img4(img0.rows,img0.cols,CV_8UC1, Scalar(0));
Mat	img5(img0.rows,img0.cols,CV_8UC1, Scalar(0));

int th;

String windowName1;
String windowName2;
String windowName3;

void createimgf() {
	int i=0,j=0;
	int x,y;
	int gx,gy,gf;
		for (i=1;i<img.rows-1;i++) {
				for(j=1;j<img.cols-1;j++) {
					gx=0;
					for (x=i-1,y=j-1;x<=i+1;x++) gx=gx+(-1)*img.at<uchar>(x,y);
					for (x=i+1,y=j+1;x>=i-1;x--) gx=gx+img.at<uchar>(x,y);
					gx=gx+(-1)*img.at<uchar>(i,j-1)+img.at<uchar>(i,j+1); 
					gx=gx/8;
					gy=0;
					for (x=i-1,y=j-1;y<=j+1;y++) gy=gy+(-1)*img.at<uchar>(x,y);
					for (x=i+1,y=j+1;y>=j-1;y--) gy=gy+img.at<uchar>(x,y);
					gy=gy+(-1)*img.at<uchar>(i-1,j)+img.at<uchar>(i+1,j);
					gy=gy/8;
					gf=(int)sqrt(gx*gx+gy*gy);
					imgf.at<uchar>(i,j)=gf;
			}
		}

}

void Gus_Blur() {
    int i,j;
    int value;
    for (i=1;i<img0.rows-1;i++) {
        for(j=1;j<img0.cols-1;j++) {
          value=0;
          value=value+(img0.at<uchar>(i-1,j-1)+img0.at<uchar>(i-1,j+1)+img0.at<uchar>(i+1,j-1)+img0.at<uchar>(i+1,j+1))/16;
          value=value+(img0.at<uchar>(i-1,j)+img0.at<uchar>(i,j-1)+img0.at<uchar>(i,j+1)+img0.at<uchar>(i+1,j))/8;
          value=value+(img0.at<uchar>(i,j))/4;
          img.at<uchar>(i,j)=value;
        }
    }
}

void Dilate_img() {
		int i=0,j=0;
		int x,y;
		int sum;
		for (i=1;i<img.rows-1;i++) {
				for(j=1;j<img.cols-1;j++) {
					sum=0;
						for (x=i-1,y=j-1;x<=i+1;x++) sum=sum+img1.at<uchar>(x,y);
						for (x=i-1,y=j;x<=i+1;x++) sum=sum+img1.at<uchar>(x,y);
						for (x=i-1,y=j+1;x<=i+1;x++) sum=sum+img1.at<uchar>(x,y);
					if (sum>0) img2.at<uchar>(i,j)=255;
					else img2.at<uchar>(i,j)=0;
				}
		}


}
void Ero_img() {
		int i=0,j=0;
		int x,y;
		int flag;
		for (i=1;i<img.rows-1;i++) {
				for(j=1;j<img.cols-1;j++) {
					flag=0;
						for (x=i-1,y=j-1;x<=i+1;x++) if (img2.at<uchar>(x,y)==0) flag=1;
						for (x=i-1,y=j;x<=i+1;x++) if (img2.at<uchar>(x,y)==0) flag=1;
						for (x=i-1,y=j+1;x<=i+1;x++) if (img2.at<uchar>(x,y)==0) flag=1;
					if (flag==1) img3.at<uchar>(i,j)=0;
					else img3.at<uchar>(i,j)=255;
				}
		}


} 

void Ero1_img() {
		int i=0,j=0;
		int x,y;
		int flag;
		for (i=1;i<img.rows-1;i++) {
				for(j=1;j<img.cols-1;j++) {
					flag=0;
						for (x=i-1,y=j-1;x<=i+1;x++) if (img1.at<uchar>(x,y)==0) flag=1;
						for (x=i-1,y=j;x<=i+1;x++) if (img1.at<uchar>(x,y)==0) flag=1;
						for (x=i-1,y=j+1;x<=i+1;x++) if (img1.at<uchar>(x,y)==0) flag=1;
					if (flag==1) img4.at<uchar>(i,j)=0;
					else img4.at<uchar>(i,j)=255;
				}
		}


}

void Dilate1_img() {
		int i=0,j=0;
		int x,y;
		int sum;
		for (i=1;i<img.rows-1;i++) {
				for(j=1;j<img.cols-1;j++) {
					sum=0;
						for (x=i-1,y=j-1;x<=i+1;x++) sum=sum+img4.at<uchar>(x,y);
						for (x=i-1,y=j;x<=i+1;x++) sum=sum+img4.at<uchar>(x,y);
						for (x=i-1,y=j+1;x<=i+1;x++) sum=sum+img4.at<uchar>(x,y);
					if (sum>0) img5.at<uchar>(i,j)=255;
					else img5.at<uchar>(i,j)=0;
				}
		}


}

void tkbfn(int , void*) {
		int i=0,j=0;
		for (i=1;i<img.rows-1;i++) {
				for(j=1;j<img.cols-1;j++) {
						
						if (imgf.at<uchar>(i,j) >= th) img1.at<uchar>(i,j)=255;
						else img1.at<uchar>(i,j)=0;
				}
		}

		Dilate_img();
		Ero_img();

		Ero1_img();
		Dilate1_img();


		
		imshow(windowName2,img5);
		imshow(windowName3,img3);

		


		return;
}

int main(int argc, char** argv) {


 if (img0.empty()) {
  	cout << "Could not open or find the image" << endl;
  	cin.get(); //wait for any key press
  	return -1;
 }

	windowName1 = "Edge";
	windowName2 = "DafterI";
	windowName3 = "IafterD";

	Gus_Blur();

	createimgf();

 	namedWindow(windowName2,WINDOW_NORMAL); // Create a window
 	namedWindow(windowName3,WINDOW_NORMAL);

 	createTrackbar( "Th", windowName2 , &th , 200 , tkbfn );

	waitKey(0); // Wait for any keystroke in the window //destroy the created window
 	
 	destroyWindow(windowName2);
 	destroyWindow(windowName3);

 return 0;
}
------------------------------------------------------------------------------------------

4) Canny Filter Function.
Syntax : Canny(src,dest,th1,th2,Ap,flag);

eg)-----------------------------------CODE------------------------------------------------

#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main(int argc, char** argv)
{
 Mat image = imread("IMAGE PATH",0);

 // Check for failure
 if (image.empty()) 
 {
  cout << "Could not open or find the image" << endl;
  cin.get(); //wait for any key press
  return -1;
 }

  Mat image1(image.rows,2*image.cols,CV_8UC3, Scalar(0,0,0));

  Canny(image,image1,25,50,3,0);



 

String windowName = "Canny Image"; //Name of the window

 namedWindow(windowName,WINDOW_NORMAL); // Create a window

 imshow(windowName, image1); // Show our image inside the created window.

 waitKey(0); // Wait for any keystroke in the window

 destroyWindow(windowName); //destroy the created window

 return 0;
}

----------------------------------------------------------------------------------------

5) Dealing with video files and basic syntax.

---------------------------Edge Detection in Video--------------------------------------

#include "opencv2/opencv.hpp"

using namespace cv;

int main(int, char**)
{
    VideoCapture cap("/home/amshumaan/OpenCV/images/LvsK.mp4");
    
    if(!cap.isOpened())  // check if we succeeded
        return -1;

    Mat edges;
    namedWindow("edges",WINDOW_NORMAL);
    for(;;)
    {
        Mat frame;
        cap >> frame; // get a new frame from camera
        // Convert frame to Gray Scale and Store in edges
        // Apply Gaussian Blur to edges


        Canny(edges, edges, 0, 30, 3);
       
        imshow("edges", edges);
        if(waitKey(30) >= 0) break;
    }
    // the camera will be deinitialized automatically in VideoCapture destructor
    return 0;
}

-------------------------------Filtering particular Range--------------------------------

#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <iostream>

using namespace cv;
using namespace std;

Mat frame;

Mat filter;

int thrl=210;
int thru=250;
int thgl=170;
int thgu=210;
int thbl=150;
int thbu=200;

String windowName;

void tkbfn() {
        int i=0,j=0;
        for (i=0;i<frame.rows;i++) {
                for(j=0;j<frame.cols;j++) {
                        if ((frame.at<Vec3b>(i,j)[2]<thrl || frame.at<Vec3b>(i,j)[2]>thru) || (frame.at<Vec3b>(i,j)[1]<thgl || frame.at<Vec3b>(i,j)[1]>thgu) || (frame.at<Vec3b>(i,j)[0]<thbl || frame.at<Vec3b>(i,j)[0]>thbu)) {
                                filter.at<Vec3b>(i,j)[2]=255;
                                filter.at<Vec3b>(i,j)[1]=255;
                                filter.at<Vec3b>(i,j)[0]=255;
                        }
                        else {
                                filter.at<Vec3b>(i,j)[2]=0;
                                filter.at<Vec3b>(i,j)[1]=0;
                                filter.at<Vec3b>(i,j)[0]=0;

                        }
                }
        }

        return;
}

int main(int, char**)
{
    VideoCapture cap("/home/amshumaan/OpenCV/images/LvsK.mp4");
    
    if(!cap.isOpened())  // check if we succeeded
        return -1;

    windowName="Filtered Output";
    namedWindow(windowName,WINDOW_NORMAL);
    for(;;)
    {
        cap >> frame; // get a new frame from camera


        tkbfn();

        imshow(windowName,filter);

        if(waitKey(30) >= 0) break;
    }
    // the camera will be deinitialized automatically in VideoCapture destructor
    return 0;
}
-----------------------------------------------------------------------------------------



--------------------------------------END------------------------------------------------

  						




